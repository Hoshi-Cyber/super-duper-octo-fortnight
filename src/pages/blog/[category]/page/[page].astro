---
// File: src/pages/blog/[category]/page/[page].astro
/**
 * Paginated category view (pages ≥ 2)
 * IA: Breadcrumbs → Lean hero → Grid → Pagination
 * Spec: Fix Plan 120 / 136.1 / 139 / 141 — centralized slug helpers, safe breadcrumbs, clean JSON-LD, normalized PostCard props
 */

import BaseLayout from "../../../../components/layout/BaseLayout.astro";
import Breadcrumbs from "../../../../components/blog/Breadcrumbs/index.astro";
import PostCard from "../../../../components/blog/PostCard/index.astro";
import Pagination from "../../../../components/blog/Pagination/index.astro";
import "../../../../styles/components/PostGrid.css";

import { getCollection } from "astro:content";
import {
  CATEGORIES,
  PER_PAGE,
  paginate,
  categoryBasePath,
  categoryPagePath,
  prettyCategoryTitle,
  buildCategoryTitle,
  buildCategoryDescription,
} from "../../../../lib/blog/categories";

import {
  categorySlug,
  postUrlFromEntry,
  abs as absUrl,
} from "../../../../lib/slug";

export const prerender = true;

/** Build static paths for pages ≥ 2 (page 1 lives at parent route) */
export async function getStaticPaths() {
  const entries = await Promise.all(
    CATEGORIES.map(async (c) => {
      const cSlug = categorySlug(c);
      const list = await getCollection(
        "blog",
        ({ data }) => !data.draft && categorySlug(data.category) === cSlug,
      );
      const count = Math.max(1, Math.ceil(list.length / PER_PAGE));
      return Array.from({ length: count }, (_, i) => ({
        params: { category: cSlug, page: String(i + 1) },
      }));
    })
  );

  return entries.flat().filter((p) => p.params.page !== "1");
}

const { category, page } = Astro.params as { category: string; page: string };
const cat = categorySlug(category);

/** Derive best-available thumbnail */
function getThumb(p: any) {
  const t = p?.data?.thumbnail ?? p?.data?.image ?? p?.data?.cover ?? p?.data?.ogImage ?? null;
  const src = typeof t === "string" ? t : t?.src ?? "/assets/logos/logo-wide-1200.png";
  const alt = (typeof t === "object" && t?.alt) ? t.alt : p?.data?.title ?? "Post thumbnail";
  return { src, alt };
}

/** Fetch and sort posts */
const all = await getCollection(
  "blog",
  ({ data }) => !data.draft && categorySlug(data.category) === cat,
);

const posts = all
  .map((p) => {
    const { src: thumbnailSrc, alt: thumbnailAlt } = getThumb(p);
    const date = new Date(p.data.date);
    return {
      url: postUrlFromEntry(p), // single source of truth
      title: p.data.title,
      description: p.data.description,
      stage: p.data.stage ?? null,
      readMins: p.data.readingTimeMinutes ?? p.data.readingTime ?? null,
      date,
      dateISO: isNaN(date.getTime()) ? undefined : date.toISOString(),
      thumbnailSrc,
      thumbnailAlt,
    };
  })
  .sort((a, b) => b.date.getTime() - a.date.getTime());

/** Pagination */
const requested = Math.max(1, Number(page || "1"));
const { pageCount, page: current, start, slice: pageItems } = paginate(posts, requested, PER_PAGE);

/** URLs + SEO */
const basePath = categoryBasePath(cat);
const pretty = prettyCategoryTitle(cat);
let pageTitle = buildCategoryTitle(cat);
pageTitle = pageCount > 1 ? `${pageTitle} — Page ${current}` : pageTitle;
const desc = `${buildCategoryDescription(cat)} Page ${current} of ${pageCount}.`;

const selfUrl = categoryPagePath(cat, current);
const canonical = current === 1 ? `${basePath}/` : selfUrl;
const prevUrl = current > 2 ? categoryPagePath(cat, current - 1) : current === 2 ? `${basePath}/` : null;
const nextUrl = current < pageCount ? categoryPagePath(cat, current + 1) : null;

/** JSON-LD: Breadcrumbs (absolute URLs via shared helper) */
const breadcrumbsLd = {
  "@context": "https://schema.org",
  "@type": "BreadcrumbList",
  itemListElement: [
    { "@type": "ListItem", position: 1, name: "Home",  item: absUrl("/", Astro.site) },
    { "@type": "ListItem", position: 2, name: "Blog",  item: absUrl("/blog/", Astro.site) },
    { "@type": "ListItem", position: 3, name: pretty, item: absUrl(basePath + "/", Astro.site) },
    { "@type": "ListItem", position: 4, name: `Page ${current}`, item: absUrl(selfUrl, Astro.site) },
  ],
};

/** JSON-LD: ItemList */
const itemListLd = {
  "@context": "https://schema.org",
  "@type": "ItemList",
  itemListElement: pageItems.map((p, i) => ({
    "@type": "ListItem",
    position: start + i + 1,
    url: absUrl(p.url, Astro.site),
    name: p.title,
  })),
};

/** Visible breadcrumbs via component */
const breadcrumbItems = [
  { label: "Home", href: "/" },
  { label: "Blog", href: "/blog/" },
  { label: pretty, href: `${basePath}/` },
  { label: `Page ${current}`, current: true },
];

/** First card image for OG + optional preload (paginated parity) */
const ogImage = pageItems[0]?.thumbnailSrc ?? null;
---

<BaseLayout title={pageTitle} description={desc} seo={{ canonical }}>
  <fragment slot="head">
    <link rel="canonical" href={canonical} />
    {prevUrl && <link rel="prev" href={prevUrl} />}
    {nextUrl && <link rel="next" href={nextUrl} />}
    <meta property="og:title" content={pageTitle} />
    <meta property="og:url" content={canonical} />
    {ogImage && <meta property="og:image" content={ogImage} />}
    {ogImage && <link rel="preload" as="image" href={ogImage} />}
    <script type="application/ld+json" is:inline>{JSON.stringify(breadcrumbsLd)}</script>
    <script type="application/ld+json" is:inline>{JSON.stringify(itemListLd)}</script>
  </fragment>

  <section class="container page-gap-after" data-section="category">
    <Breadcrumbs items={breadcrumbItems} />

    <header data-section="hero" style="max-width:56rem; padding: 0 var(--space-4) var(--space-6);">
      <h1 class="h2" style="margin: 0 0 var(--space-2);">{pretty}</h1>
      <p class="text-muted" style="margin: 0 0 var(--space-3);">Page {current} of {pageCount}</p>
      <div class="flex items-center gap-3 flex-wrap">
        <a class="btn btn-primary" href="/services/cv-rewrite?utm_source=blog&utm_medium=category&utm_campaign=hero" data-cta="hero-primary" data-section="hero">Book CV Rewrite</a>
        <a class="btn" href="/offers/free-cv-audit?utm_source=blog&utm_medium=category&utm_campaign=hero" data-cta="hero-secondary" data-section="hero">Free 24-Point CV Audit</a>
      </div>
    </header>

    {pageItems.length === 0 ? (
      <p class="text-muted" style="padding: 0 var(--space-4);">No posts yet. Check back soon.</p>
    ) : (
      <ol class="post-grid" data-section="grid" style="padding: 0 var(--space-4);">
        {pageItems.map((p, i) => (
          <li>
            <PostCard
              url={p.url}
              title={p.title}
              excerpt={p.description}
              dateISO={p.dateISO}
              readMin={p.readMins}
              stage={p.stage}
              cover={{ src: p.thumbnailSrc, alt: p.thumbnailAlt }}
              data-pos={start + i + 1}
              data-cta="post-card"
              category={pretty}
              categoryHref={`${basePath}/`}
            />
          </li>
        ))}
      </ol>
    )}

    {pageCount > 1 && (
      <Pagination basePath={basePath} current={current} total={pageCount} />
    )}
  </section>
</BaseLayout>
