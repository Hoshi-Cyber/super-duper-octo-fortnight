---
import "./Pagination.css";

export interface Props {
  basePath: string;   // e.g., "/blog/category/cv-tips"
  current: number;    // 1-based
  total: number;      // total pages ≥ 1
}

const { basePath, current, total } = Astro.props as Props;

// Helper: build URL. Page 1 = basePath. Page N>1 = `${basePath}/page/N`
const hrefFor = (n: number) => (n === 1 ? basePath : `${basePath}/page/${n}`);

// Clamp
const cur = Math.max(1, Math.min(current, Math.max(1, total)));

// Build windowed page list with gaps
// Strategy: always show 1 and total, plus a sliding window around current.
const windowSize = 1; // pages on each side of current
const pages: (number | "...")[] = [];
const add = (x: number | "...") => pages.push(x);

if (total <= 7) {
  for (let i = 1; i <= total; i++) add(i);
} else {
  const start = Math.max(2, cur - windowSize);
  const end = Math.min(total - 1, cur + windowSize);

  add(1);
  if (start > 2) add("...");
  for (let i = start; i <= end; i++) add(i);
  if (end < total - 1) add("...");
  add(total);
}
---

<nav class="pagination" aria-label="Pagination" data-section="pagination">
  <div class="container">
    <ol class="pagination__list" role="list">
      {/* Prev */}
      <li class="pagination__item">
        {cur > 1 ? (
          <a
            class="pagination__control"
            href={hrefFor(cur - 1)}
            rel="prev"
            data-cta="pagination-prev"
          >
            ‹ Prev
          </a>
        ) : (
          <span class="pagination__control is-disabled" aria-disabled="true">‹ Prev</span>
        )}
      </li>

      {/* Numeric */}
      {pages.map((p) => (
        <li class="pagination__item">
          {p === "..." ? (
            <span class="pagination__gap" aria-hidden="true">…</span>
          ) : p === cur ? (
            <span class="pagination__page is-current" aria-current="page">{p}</span>
          ) : (
            <a
              class="pagination__page"
              href={hrefFor(p as number)}
              data-cta="pagination-page"
            >
              {p}
            </a>
          )}
        </li>
      ))}

      {/* Next */}
      <li class="pagination__item">
        {cur < total ? (
          <a
            class="pagination__control"
            href={hrefFor(cur + 1)}
            rel="next"
            data-cta="pagination-next"
          >
            Next ›
          </a>
        ) : (
          <span class="pagination__control is-disabled" aria-disabled="true">Next ›</span>
        )}
      </li>
    </ol>
  </div>
</nav>
