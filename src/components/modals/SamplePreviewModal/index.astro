---
/**
 * SamplePreviewModal — mobile-first, a11y-safe modal for sample previews
 * Props:
 *  - open: boolean
 *  - title: string
 *  - before: string
 *  - after: string
 *  - media?: { src: string; alt: string } | null
 *
 * Emits no events by default; consumers toggle `open` via parent state.
 * Optional close hooks: listen for `[data-close]` click or Escape key.
 */
import "./SamplePreviewModal.css";

interface Media { src: string; alt: string }
interface Props {
  open: boolean;
  title: string;
  before: string;
  after: string;
  media?: Media | null;
}

const { open = false, title, before, after, media = null } = Astro.props as Props;

// IDs for a11y labels
const dialogId = "sample-preview-modal";
const titleId = "sample-preview-title";
const descId = "sample-preview-desc";
---

<div
  class={`spm ${open ? "is-open" : ""}`}
  aria-hidden={open ? "false" : "true"}
  data-section="sample-preview"
>
  <!-- Backdrop -->
  <div class="spm__backdrop" data-close aria-hidden="true"></div>

  <!-- Dialog -->
  <aside
    id={dialogId}
    class="spm__dialog"
    role="dialog"
    aria-modal="true"
    aria-labelledby={titleId}
    aria-describedby={descId}
    tabindex="-1"
  >
    <header class="spm__header">
      <h2 id={titleId} class="spm__title">{title}</h2>
      <button type="button" class="spm__close" data-close aria-label="Close preview">×</button>
    </header>

    <div id={descId} class="spm__content">
      {media && (
        <figure class="spm__media">
          <img
            src={media.src}
            alt={media.alt}
            loading="lazy"
            decoding="async"
            width="1280"
            height="720"
          />
        </figure>
      )}

      <div class="spm__ba">
        <section class="spm__block">
          <h3 class="spm__eyebrow">Before</h3>
          <p class="spm__text">{before}</p>
        </section>

        <section class="spm__block">
          <h3 class="spm__eyebrow">After</h3>
          <p class="spm__text">{after}</p>
        </section>
      </div>
    </div>
  </aside>

  <!-- framework-free focus trap + close handlers -->
  <script is:inline>
    (() => {
      const root = document.currentScript.closest('.spm');
      if (!root) return;

      const dialog = root.querySelector('.spm__dialog');
      const closeEls = root.querySelectorAll('[data-close]');
      const isOpen = () => root.classList.contains('is-open');

      // Focus trap
      const getFocusables = () =>
        dialog.querySelectorAll('a[href], button, textarea, input, select, [tabindex]:not([tabindex="-1"])');

      const trap = (e) => {
        if (!isOpen()) return;
        const items = getFocusables();
        if (!items.length) return;
        const first = items[0], last = items[items.length - 1];
        if (e.key === 'Tab') {
          if (e.shiftKey && document.activeElement === first) { last.focus(); e.preventDefault(); }
          else if (!e.shiftKey && document.activeElement === last) { first.focus(); e.preventDefault(); }
        }
        if (e.key === 'Escape') {
          root.classList.remove('is-open');
          root.setAttribute('aria-hidden', 'true');
        }
      };

      // Open autofocus
      const observe = new MutationObserver(() => {
        if (isOpen()) {
          dialog.focus();
        }
      });
      observe.observe(root, { attributes: true, attributeFilter: ['class'] });

      // Close handlers
      closeEls.forEach(el => el.addEventListener('click', () => {
        root.classList.remove('is-open');
        root.setAttribute('aria-hidden', 'true');
      }, { passive: true }));

      document.addEventListener('keydown', trap);
    })();
  </script>
</div>
